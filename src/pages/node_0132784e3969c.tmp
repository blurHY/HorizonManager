<template>
  <div class="d-flex align-items-stretch">
    <div class="mainPanel">
      <!--Stats cards-->
      <div class="row">
        <div class="col-md-6 col-xl-3" v-for="stats in statsCards" :key="stats.title">
          <stats-card>
            <div class="icon-big text-center" :class="`icon-${stats.type}`" slot="header">
              <i :class="stats.icon"></i>
            </div>
            <div class="numbers" slot="content">
              <p>{{stats.title}}</p>
              <span class="statsval">{{stats.value}}</span>
            </div>
            <div class="stats" slot="footer">
              <i :class="stats.footerIcon"></i>
              <span>{{stats.footerText}}</span>
            </div>
          </stats-card>
        </div>
      </div>

      <!--Charts-->
      <div class="row">
        <div class="col-12">
          <chart-card
            title="System"
            sub-title="CPU and RAM statistics"
            class="system"
            :chart-data="systemChart.data"
            :chart-options="systemChart.options"
          >
            <span slot="footer">
              <i class="ti-reload"></i> Reload per 1.5 seconds
            </span>
            <div slot="legend">
              <i class="fa fa-circle cpu-dot"></i> CPU
              <i class="fa fa-circle ram-dot"></i> RAM
              <i class="fa fa-circle swap-dot"></i> Swap
            </div>
          </chart-card>
        </div>

        <div class="col-md-6 col-12">
          <chart-card
            title="Site Statistics"
            sub-title="Status of sites"
            :chart-data="siteChart.data"
            chart-type="Pie"
          >
            <span slot="footer">
              <i class="ti-reload"></i> Reload per 30 second
            </span>
            <div slot="legend">
              <i class="fa fa-circle text-info"></i> Crawled
              <i class="fa fa-circle text-warning"></i> Pending
              <i class="fa fa-circle text-danger"></i> Syncing
            </div>
          </chart-card>
        </div>

        <div class="col-md-6 col-12">
          <card title="Control Panel">
            <ul class="list-group list-group-flush">
              <li class="list-group-item d-flex justify-content-between align-items-center">
                <div>
                  ZeroNet
                  <button
                    class="btn btn-sm btn-outline-success ml-2"
                    v-if="!zeronetStatus"
                    @click="processControl('zeronet','start')"
                  >Start</button>
                  <button
                    class="btn btn-sm btn-outline-warning ml-2"
                    v-if="zeronetStatus"
                    @click="processControl('zeronet','stop')"
                  >Stop</button>
                  <button
                    class="btn btn-sm btn-outline-danger ml-2"
                    v-if="zeronetStatus"
                    @click="processControl('zeronet','kill')"
                  >Kill</button>
                </div>
                <div :class="{'text-success':zeronetStatus}">
                  {{upOrDown(zeronetStatus)}}
                  <i class="fa fa-power-off"></i>
                </div>
              </li>
              <li class="list-group-item d-flex justify-content-between align-items-center">
                <div>
                  HorizonSpider
                  <button
                    class="btn btn-sm btn-outline-success ml-2"
                    v-if="!spiderStatus"
                    @click="processControl('spider','start')"
                  >Start</button>
                  <button
                    class="btn btn-sm btn-outline-warning ml-2"
                    v-if="spiderStatus"
                    @click="processControl('spider','stop')"
                  >Stop</button>
                  <button
                    class="btn btn-sm btn-outline-danger ml-2"
                    v-if="spiderStatus"
                    @click="processControl('spider','kill')"
                  >Kill</button>
                </div>
                <div :class="{'text-success':spiderStatus}">
                  {{upOrDown(spiderStatus)}}
                  <i class="fa fa-power-off"></i>
                </div>
              </li>
            </ul>
            <div slot="footer">
              <i class="fa fa-terminal"></i>
              <span class="pl-2">{{status}}</span>
            </div>
          </card>
        </div>
      </div>
    </div>
    <div class="logsPanel flex-grow-1 ml-4">
      <card title="Log" subTitle="Logs of Spider and ZeroNet">
        <div class="card-body">
          <LogPage ref="log"></LogPage>
        </div>
      </card>
    </div>
  </div>
</template>
<script>
import { StatsCard, ChartCard } from "@/components/index";
import Chartist from "chartist";
import LogPage from "./LogPage";
let moment = require("moment");
export default {
  components: {
    StatsCard,
    ChartCard,
    LogPage
  },
  methods: {
    upOrDown(bool) {
      return bool ? "Up" : "Down";
    },
    showMessage(type, msg) {
      console.log(`${type} ${msg}`);
      if (type === "error") type = "danger";
      this.$notify({
        message: msg,
        type
      });
    },
    setStatus(msg) {
      console.log("Status: " + msg);
      this.status = msg;
    },
    updateAll() {
      this.$socket.emit("updateAll");
    },
    updateSysChart() {
      if (this.pageActive) this.$emit("updateSysChart");
    },
    processControl(proc, action) {
      this.$socket.emit("processControl", proc, action);
    },
    addPanelLogs() {
      let arr = [];
      for (let a of arguments) arr.push([`<span class="text-info">${a}</span>`);
      this.$refs.log.lines += arr;
    }
  },
  watch: {
    $route(to, from) {
      if (to.name === "dashboard") {
        console.log("returned to dashboard");
        this.pageActive = true;
        this.updateSysChart();
        this.updateAll();
      } else {
        this.pageActive = false;
      }
    }
  },
  sockets: {
    connect() {
      console.log("Connected");
      this.$socket.emit("subscribeLogs");
      this.addPanelLogs("Server connected");
    },
    disconnect() {
      this.showMessage(["warning", "Server disconnected"]);
      this.setStatus("Disconnected");
    },
    setStatus(msg) {
      this.setStatus(msg);
    },
    setProcessStatus(args) {
      let [zn, hs] = args;
      console.log(`Status: zn,${this.upOrDown(zn)} hs,${this.upOrDown(hs)}`);
      this.spiderStatus = hs;
      this.zeronetStatus = zn;
    },
    showMessage(args) {
      let [type, msg] = args;
      this.showMessage(type, msg);
    },
    updateBadgeStats(data) {
      this.statsCards[0].value = data.disk;
      this.statsCards[0].footerText = `Total ${data.disk_total}`;
      this.statsCards[1].value = data.error;
      this.statsCards[1].footerText = `Within last 24 hours`;
      this.statsCards[2].value = data.warning;
      this.statsCards[2].footerText = `Within last 24 hours`;
      this.statsCards[3].value = data.sites;
      this.statsCards[3].footerText = `Known sites`;
    },
    updateGraphStats(data) {
      this.systemChart.data.labels.push(
        moment()
          .utc(data["time"])
          .format("mm:ss")
      );
      this.systemChart.data.series[0].push(data["cpu"]);
      this.systemChart.data.series[1].push(data["ram"]);
      this.systemChart.data.series[2].push(data["swap"]);
      // Max count: 10
      let ifpop = arr => (arr.length > 10 ? arr.shift() : null);
      for (let x of this.systemChart.data.series) ifpop(x);
      ifpop(this.systemChart.data.labels);

      this.updateSysChart();
    }
  },
  /**
   * Chart data used to render stats, charts. Should be replaced with server data
   */
  data() {
    return {
      statsCards: [
        {
          type: "info",
          icon: "ti-server",
          title: "Used",
          value: "-  ",
          footerText: " --",
          footerIcon: "ti-info-alt"
        },
        {
          type: "danger",
          icon: "ti-pulse",
          title: "Errors",
          value: "-  ",
          footerText: " --",
          footerIcon: "ti-timer"
        },
        {
          type: "warning",
          icon: "ti-alert",
          title: "Warnings",
          value: "-  ",
          footerText: " --",
          footerIcon: "ti-timer"
        },
        {
          type: "success",
          icon: "ti-world",
          title: "Sites",
          value: "-  ",
          footerText: " --",
          footerIcon: "ti-light-bulb"
        }
      ],
      systemChart: {
        data: {
          labels: [],
          series: [[], [], []]
        },
        options: {
          low: 0,
          high: 100,
          showArea: false,
          height: "245px",
          axisX: {
            showGrid: false
          },
          lineSmooth: Chartist.Interpolation.simple({
            divisor: 3
          }),
          showLine: true,
          showPoint: false
        }
      },
      siteChart: {
        data: {
          labels: ["62%", "32%", "6%"],
          series: [62, 32, 6]
        },
        options: {}
      },
      status: "Unknown",
      zeronetStatus: false,
      spiderStatus: false,
      pageActive: true
    };
  }
};
</script>
<style scoped>
.mainPanel {
  max-width: 1000px;
}
.logsPanel .card {
  height: 100%;
}
@media screen and (max-width: 1800px) {
  .logsPanel {
    display: none;
  }
}
@media screen and (max-width: 600px) {
  .system >>> .ct-label.ct-horizontal.ct-end {
    display: none;
  }
  .system >>> .ct-chart {
    margin-bottom: 0;
  }
}
.system >>> .ct-series-a .ct-line {
  stroke: rgba(17, 88, 219, 0.808);
  stroke-width: 4px;
}
.system >>> .ct-series-b .ct-line {
  stroke: rgba(255, 174, 0, 0.753);
  stroke-width: 4px;
}
.system >>> .ct-series-c .ct-line {
  stroke: rgba(255, 0, 0, 0.692);
  stroke-width: 4px;
}
.cpu-dot {
  color: rgba(17, 88, 219, 0.808);
}
.ram-dot {
  color: rgba(255, 174, 0, 0.753);
}
.swap-dot {
  color: rgba(255, 0, 0, 0.692);
}
.statsval {
  white-space: nowrap;
}
.mainPanel >>> .col-7 {
  padding-left: 0;
}
</style>
